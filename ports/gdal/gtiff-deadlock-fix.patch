From b5858ed5bc5004c97f7cd6000674015bdc70b33b Mon Sep 17 00:00:00 2001
From: Even Rouault <even.rouault@spatialys.com>
Date: Sat, 14 Oct 2023 00:52:46 +0200
Subject: [PATCH] GTiff multithreaded reading/writing: fix a deadlock situation

Fix a deadlock encountered with
gdalwarp test1.tif test2.tif -co  COMPRESS=LZW   -co TILED=YES  -co BLOCKXSIZE=256  -co  BLOCKYSIZE=256   -co   BIGTIFF=YES  -multi  -co  NUM_THREADS=ALL_CPUS out.tif -overwrite
on the test datasets provided in https://github.com/OSGeo/gdal/issues/8470#issuecomment-1760639682
---
 frmts/gtiff/geotiff.cpp | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/frmts/gtiff/geotiff.cpp b/frmts/gtiff/geotiff.cpp
index ed79c0972e0..33846d66513 100644
--- a/frmts/gtiff/geotiff.cpp
+++ b/frmts/gtiff/geotiff.cpp
@@ -2886,8 +2886,16 @@ static void ThreadDecompressionFunc(void *pData)
                 psJob->nXBlock, psJob->nYBlock);
             if (apoBlocks[i] == nullptr)
             {
+                // Temporary disabling of dirty block fushing, otherwise
+                // we can be in a deadlock situation, where the
+                // GTiffDataset::SubmitCompressionJob() method waits for jobs
+                // to be finished, that can't finish (actually be started)
+                // because this task and its siblings are taking all the
+                // available workers allowed by the global thread pool.
+                GDALRasterBlock::EnterDisableDirtyBlockFlush();
                 apoBlocks[i] = poDS->GetRasterBand(iBand)->GetLockedBlockRef(
                     psJob->nXBlock, psJob->nYBlock, TRUE);
+                GDALRasterBlock::LeaveDisableDirtyBlockFlush();
                 if (apoBlocks[i] == nullptr)
                     return false;
             }
