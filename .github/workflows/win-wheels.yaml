---
name: Windows wheels

on: [push, pull_request, workflow_dispatch]

# cancel running jobs on new commit to PR
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-wheels-win:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: "windows-2019"
            triplet: "x64-windows"
            # windows requires windows-specific paths
            vcpkg_cache: "c:\\vcpkg\\installed"
            vcpkg_logs: "c:\\vcpkg\\buildtrees\\**\\*.log"

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: rasterio/rasterio
          fetch-depth: 0

      - name: Cache vcpkg
        uses: actions/cache@v1
        id: vcpkgcache
        with:
          path: C:/vcpkg/installed
          key: ${{ runner.os }}-vcpkg

      - name: Install GDAL
        run: |
          vcpkg install gdal[core]:x64-windows
          vcpkg list

      - name: Upload vcpkg build logs
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          path: ${{ matrix.vcpkg_logs }}

      - name: Add to rasterio setup.cfg
        shell: bash
        run: |
          echo ""
          echo "[build_ext]"
          echo "include_dirs = $GDAL_INCLUDE_PATH"
          echo "libraries = gdal_i"
          echo "library_dirs = $GDAL_LIBRARY_PATH"
          cat setup.cfg

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.3.1
        env:
          CIBW_ENVIRONMENT_WINDOWS:
            VCPKG_INSTALL="$VCPKG_INSTALLATION_ROOT/installed/x64-windows"
            GDAL_INCLUDE_PATH="$VCPKG_INSTALL/include"
            GDAL_LIBRARY_PATH="$VCPKG_INSTALL/lib"
            PACKAGE_DATA=1
            GDAL_DATA="$VCPKG_INSTALL/share/gdal"
            PROJ_LIB="$VCPKG_INSTALL/share/proj4"
            GDAL_VERSION="3.4"
          CIBW_BEFORE_BUILD_WINDOWS: pip install delvewheel 
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: delvewheel repair --add-path C:/vcpkg/installed/x64-windows/bin -w {dest_dir} {wheel}

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  test-wheels:
    name: Test wheels on ${{ matrix.os }} (Python ${{ matrix.python-version }})
    needs: [build-wheels-win]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ["windows-latest"]
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          # cache: "pip"
          # cache-dependency-path: "ci/requirements-wheel-test.txt"

      - name: Download wheels from artifacts
        uses: actions/download-artifact@v2
        with:
          path: wheelhouse

      - name: Install dependencies and rasterio wheel
        shell: bash
        run: |
          python -m pip install shapely oldest-supported-numpy attrs pytest click mock boto3 packaging hypothesis
          python -m pip install --pre --find-links wheelhouse/artifact rasterio
          python -m pip list

      - name: Run tests
        shell: bash
        run: |
          rio --version
          rio env --formats
          python ../test_fiona_issue383.py
          cp -R ../rasterio/tests ./tests
          PROJ_NETWORK=ON python -m pytest -vv tests -m "not gdalbin" -k "not test_ensure_env_decorator_sets_gdal_data_prefix and not test_tiled_dataset_blocksize_guard and not test_untiled_dataset_blocksize and not test_positional_calculation_byindex and not test_transform_geom_polygon and not test_reproject_error_propagation and not test_issue2353 and not test_info_azure_unsigned"
